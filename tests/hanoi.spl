/*
 * Recursive towers of Hanoi implementation.
 */

([t], ([t], [t])) hanoiR (Int discs) {
    [Int] a = createTower(discs);
    [Int] b = [];
    [Int] c = [];
    printTowers(a, b, c);
    return transport(discs, a, b, c);
}

([t], ([t], [t])) transport (Int n, [t] from, [t] via, [t] to) {
    ([t], ([t], [t])) t = ([], ([], []));
    ([t], [t]) u = ([], []);
    if (n > 1) {
        t = transport(n - 1, from, to, via);
        from = t.fst;
        u = t.snd;
        to = u.fst;
        via = u.snd;
    }
    to = from.hd : to;
    from = from.tl;
    printTowers(from, via, to);
    if (n > 1) {
        t = transport(n - 1, via, from, to);
        via = t.fst;
        u = t.snd;
        from = u.fst;
        to = u.snd;
    }
    return (from, (via, to));
}

// Print the towers (in a list).
Void printTowers ([t] a, [t] b, [t] c) {
    print(a : b : c : []);
}

// Initialize a tower with n discs.
[Int] createTower (Int n) {
    [Int] l = [];
    Int i = n;
    while (i > 0) {
        l = n : l;
        i = i - 1;
    }
    return l;
}
